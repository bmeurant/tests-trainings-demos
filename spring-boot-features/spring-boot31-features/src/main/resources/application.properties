# H2 Database Console Configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA and Hibernate Configuration
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
# Use 'create' to populate schema and data on startup

# HTTP/2 and SSL/TLS Configuration
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-type=PKCS12
server.ssl.key-store-password=password
server.ssl.key-alias=tomcat

server.http2.enabled=true
# Explicitly enable HTTP/2

server.port=8443
# Use HTTPS default port

# Optional: Turn off Spring Boot banner for cleaner logs
spring.main.banner-mode=off


spring.application.name=spring-boot31-features
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# Micrometer Tracing Configuration
management.tracing.sampling.probability=1.0
# Sample all traces for demo purposes
management.endpoints.web.exposure.include=health,info,metrics,httpexchanges,trace,prometheus
# Expose useful Actuator endpoints
management.endpoint.metrics.enabled=true
management.endpoint.httpexchanges.enabled=true
management.endpoint.prometheus.enabled=true

spring.docker.compose.enabled=true
# Lifecycle management: START_AND_STOP will start compose services when app starts, and stop them when app stops.
# Alternatives: NO_MANAGEMENT (Spring Boot won't start/stop) or START_ONLY (starts but doesn't stop).
spring.docker.compose.lifecycle-management=start_and_stop
spring.docker.compose.file=./spring-boot31-features/compose.yaml