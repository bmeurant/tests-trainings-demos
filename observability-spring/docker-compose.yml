
services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.90.1 # Specify a recent version
    container_name: otel-collector
    command: ["--config=/etc/otel/otel-collector-config.yml"]
    volumes:
      - ./config/otel/otel-collector-config.yml:/etc/otel/otel-collector-config.yml:ro
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP (used by Spring Boot app for traces, metrics, logs)
      - "8888:8888" # Prometheus metrics (from collector itself)
      - "8889:8889"  # Prometheus scraping endpoint from collector
    networks:
      - observability-net
    depends_on:
      - jaeger
      - grafana

  prometheus:
    image: prom/prometheus:v2.48.1 # Specify a recent version
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle' # Allows hot reloading of config via API call
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - observability-net

  jaeger:
    image: jaegertracing/all-in-one:1.53 # Specify a recent version
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # Collector (gRPC) - used by OTel collector
      - "9411:9411"   # Jaeger's Zipkin HTTP receiver
    networks:
      - observability-net
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: "9411" # Re-trying the specific HTTP port variable

      # Agent configuration (within all-in-one)
      # Tell the agent to send *native Jaeger traces* to its collector's native gRPC port
      AGENT_COLLECTOR_GRPC_HOST_PORT: "localhost:14250" # Changed to localhost as it's internal
      # Tell the agent to send *OTLP traces* to its collector's OTLP gRPC port
      AGENT_COLLECTOR_OTLP_HOST_GRPC: "localhost:4317" # Explicitly tell agent to use this
      AGENT_COLLECTOR_OTLP_HOST_HTTP: "localhost:4318" # Explicitly tell agent to use this

      # Collector configuration (within all-in-one)
      # Ensure the Collector part listens on the correct ports
      COLLECTOR_OTLP_GRPC_HOST_PORT: "4317"
      COLLECTOR_OTLP_HTTP_HOST_PORT: "4318"
      COLLECTOR_GRPC_HOST_PORT: "14250" # Explicitly define for the collector
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:16686" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:10.2.2 # Specify a recent version supporting OTLP log ingestion
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      # - grafana-storage:/var/lib/grafana # Optional: persist Grafana data
    networks:
      - observability-net
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      # Enable OTLP log ingestion if required by feature flag for the specific Grafana version
      # For Grafana 10.2+, OTLP logs are generally available. The OTel collector sends to http://grafana:4318/otlp
      # Ensure Grafana's internal HTTP server listens on 4318 for OTLP or adjust collector.
      # Grafana's default HTTP port is 3000. OTLP ingestion might be on a different internal path/port or main port.
      # The OTel documentation suggests Grafana's OTLP endpoint is typically the main Grafana endpoint + /otlp
      # So, if Grafana is at http://grafana:3000, the OTLP log endpoint would be http://grafana:3000/otlp
      # Let's adjust the OTel collector config for Grafana logs to use port 3000.
      - prometheus
      # - loki # if loki was used

# Optional: Loki for logs (if not sending logs directly to Grafana via OTLP)
#  loki:
#    image: grafana/loki:2.9.2
#    container_name: loki
#    ports:
#      - "3100:3100" # Loki API
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - observability-net
#    # volumes:
#    #   - ./config/loki/local-config.yaml:/etc/loki/local-config.yaml:ro # If custom Loki config needed

# Define a network for services to communicate
networks:
  observability-net:
    driver: bridge

# Optional: Define a volume for Grafana storage
# volumes:
#  grafana-storage:
